<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<bean id="helloWorld" class="com.dex.spring.beans.HelloWorld">
		<!-- 属性注入，最常用的属性注入方 -->
		<property name="name" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法来配置bean的属性 -->
	<bean id="car" class="com.dex.spring.beans.Car">
		<!-- 通过index索引来依次为构造方法传值 -->
		<constructor-arg value="audi" index="0"></constructor-arg>
		<constructor-arg value="shanghai" index="1"></constructor-arg>
		<constructor-arg value="300000" index="2"></constructor-arg>
	</bean>
	
	<!-- 使用构造函数注入属性值可以指定参数的位置和参数的类型，以区分重载的构造函数 -->
	<bean id="car2" class="com.dex.spring.beans.Car">
		<!-- 使用参数类型来区分不同的构造函数 -->
		<constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
		<constructor-arg value="shanghai" type="java.lang.String"></constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	<bean id="car3" class="com.dex.spring.beans.Car">
		<constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
		<!-- 如果字面值包含特殊字符，可以使用<![CDATA[XXX]]>包裹起来 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<shanghai>~@#]]></value>
		</constructor-arg>
		<!-- 属性值也可以使用value子节点进行配置 -->
		<constructor-arg type="int">
			<value>240</value>
		</constructor-arg>
	</bean>
	
	<bean id="person" class="com.dex.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="25"></property>
		<!-- 可以使用property的ref属性建立bean之间的引用关系 -->
		<property name="car" ref="car2"></property>
	</bean>
	
	
	<bean id="person2" class="com.dex.spring.beans.Person">
		<property name="name" value="Anma"></property>
		<property name="age" value="23"></property>
		<property name="car">
		<!-- 内部Bean,在bean元素内部再使用bean来构造一共对象 -->
		<!-- 内部Bean不能被外部Bean引用，只能在内部使用 -->
			<bean class="com.dex.spring.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>		
				<constructor-arg value="ChangAn"></constructor-arg>
				<constructor-arg value="200000" type="double"></constructor-arg>
			</bean>
		</property>
	</bean>
	
	<!-- 配置集合属性，即类似容器变量 -->
	<bean id="person3" class="com.dex.spring.beans.collections.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<!-- 配置List属性，使用list节点为List类型的属性赋值 ，还有set、map等集合标签-->
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
				<ref bean="car3"/>
			</list>
		</property>
	</bean>
	
	<bean id="newPerson" class="com.dex.spring.beans.collections.NewPerson">
		<property name="name" value="rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<!-- 使用map节点及map的entry子节点为map属性赋值-->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean以供多个bean进行引用，需要导入util命名空间 --> 
	<!-- 
	<util:list id="cars">
		<ref bean="car" />
		<ref bean="car2" />
	</util:list>
 	-->
<!-- 	 
	<bean id="person4" class="com.dex.spring.beans.collections.NewPerson">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		引用已经定义好了的单例bean cars 
		<property name="cars" ref="cars"></property>
	</bean>
 -->
 	 
</beans>























